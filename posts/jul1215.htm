<!DOCTYPE html>

<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <meta name="description" content="computer and data science blog">
  <meta name="author" content="michalis despotopoulos">
  <link rel="icon" href="../img/fav32.png">

  <title>A day In life: June 13, 2018</title>

  <!-- Bootstrap core CSS -->
  <link href="../dist/css/bootstrap.min.css" rel="stylesheet">

  <!-- Custom styles for this template -->
  <link href="https://fonts.googleapis.com/css?family=Playfair+Display:700,900" rel="stylesheet">
  <link href="//cdn-images.mailchimp.com/embedcode/horizontal-slim-10_7.css" rel="stylesheet" type="text/css">
  <link rel="stylesheet" href="../style.css" media="screen">
  <link rel="icon" href="./img/fav32.ico" type="image/gif">
  <!-- Global site tag (gtag.js) - Google Analytics -->
  <script async src="https://www.googletagmanager.com/gtag/js?id=UA-119754085-1"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'UA-119754085-1');
  </script>
  <script type="text/javascript" src="//downloads.mailchimp.com/js/signup-forms/popup/embed.js"
    data-dojo-config="usePlainJson: true, isDebug: false"></script><script
    type="text/javascript">
    require(["mojo/signup-forms/Loader"],
    function(L) { L.start({"baseUrl":"mc.us18.list-manage.com","uuid":"0949a3f68a174be9eb47e487f","lid":"2597c8fdeb"}) })
  </script>
  <!-- Hotjar Tracking Code -->
<script>
    (function(h,o,t,j,a,r){
        h.hj=h.hj||function(){(h.hj.q=h.hj.q||[]).push(arguments)};
        h._hjSettings={hjid:918288,hjsv:6};
        a=o.getElementsByTagName('head')[0];
        r=o.createElement('script');r.async=1;
        r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;
        a.appendChild(r);
    })(window,document,'https://static.hotjar.com/c/hotjar-','.js?sv=');
</script>
</head>

<body>
  <div class="container">
    <header class="blog-header py-3">
      <div class="row flex-nowrap justify-content-between align-items-center">
        <div class="col-4 pt-1 justify-content-start">
          <a class="text-muted" href="https://mailchi.mp/189317a0a55f/adayinlife"><img class="subscribe" src="../img/subscribe.png"></img></a>
        </div>
        <div class="col-4 text-center">
          <img class="logo img-fluid" src="../img/logo-desktop.png" alt="logo" border="1">
          <!--<a class="blog-header-logo text-dark" href="#"><span class=redLetter>A</span> day <span class=redLetter>I</span>n life</a>-->
        </div>
        <div class="col-4 d-flex justify-content-end align-items-center">
          <a class="text-muted" href="../rss.xml">
            <img class=rss src="../img/rss.png"></img>
            <!--<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mx-3"><circle cx="10.5" cy="10.5" r="7.5"></circle><line x1="21" y1="21" x2="15.8" y2="15.8"></line></svg>-->
          </a>
          <!--<a class="btn btn-sm btn-outline-secondary" href="#">Sign up</a>-->
        </div>
      </div>
    </header>

    <div class="nav-scroller py-1 mb-2">
      <nav class="nav d-flex justify-content-between">
        <a class="p-2 text-muted" href="../index.htm">Home</a>
      </nav>
    </div>

    <div class="content">
      <div class = "date">July 12, 2015</div>
      <h3 class="postTitle">A short hashing tale</h3>
      <h3>Introduction</h3>
      <p class="postPar">Have you ever wondered what is the distribution of allocations in data structures which make use of hashing, such as hash tables or hash sets, when using different datasets? How often do we have collisions? How many slots remain empty? Is the size of the data structure important?</p>

      <p>I will try to indirectly answer these questions with an experimental presentation.</p>

      <h3>Birthday paradox</h3>
      <p class="postPar">I am just going to say that the birthday paradox has a really useful conclusion; it tells us when the first collision is going to happen! So, let’s say that we have a hash function that takes an arbitrary number of bits as input and outputs an n-bit hash. Then, we are going to see the first collision after 2<sup><i>n</i>/2</sup> additions in the collection (and if you look at this from a security point of view, an n-bit hash is going to break after 2<sup><i>n</i>/2</sup> evaluations of the hash function). Now say that we’re using the 32-bit CRC function. Then we are expecting to see the first collision after hashing 65536 items. However, when you’re hashing and then inserting in a collection – in case its size is less than 2<sup><i>16</i></sup> in this example – you’d expect to see the first collision earlier since we’re wrapping the integer representation of the hash around the collection’s size – unfortunately we don’t have infinite memory.</p>

      <h3>Description</h3>
      <p class="postPar">I used a data set of 5163 male and female first names, which you can find <a href="http://deron.meranda.us/data/census-derived-all-first.txt">here</a>. I am using a simple integer array to represent whether a cell is empty, occupied, or hosts two or more collided entries. Now my workflow was the following:

        <ol>
          <li>Hash each string – I used Java’s hashCode()</li>
          <li>Wrap the integer representation of the hash around the size of the collection</li>
          <li>Allocate the corresponding slot</li>
          <li>Number 0 signifies an empty cell, 1 an occupied cell and 2 or more a collision</li>
        </ol>
      </p>

      <h3>Results</h3>
      <p class="postPar">I experimented with six different sizes of the collection storing the hashed strings. I start at half the total size (2581) and keep adding half the size until I reach three times the size (15489). I can summarise the whole story with the following table – which is sort of self-explanatory:</p>

      <table class="tg">
        <tbody>
          <tr>
            <th class="tg-e3zv">Total</th>
            <th class="tg-e3zv">Empty</th>
            <th class="tg-e3zv">Collisions</th>
          </tr>
          <tr>
            <td class="tg-031e">2581</td>
            <td class="tg-031e">305 (11%)</td>
            <td class="tg-031e">1552 (60%)</td>
          </tr>
          <tr>
            <td class="tg-031e">5163</td>
            <td class="tg-031e">1892 (36%)</td>
            <td class="tg-031e">1348 (26%)</td>
          </tr>
          <tr>
            <td class="tg-031e">7744</td>
            <td class="tg-031e">3979 (51%)</td>
            <td class="tg-031e">1128 (14%)</td>
          </tr>
          <tr>
            <td class="tg-031e">10326</td>
            <td class="tg-031e">6261 (60%)</td>
            <td class="tg-031e">944 (9%)</td>
          </tr>
          <tr>
            <td class="tg-031e">12907</td>
            <td class="tg-031e">8627 (66%)</td>
            <td class="tg-031e">766 (5%)</td>
          </tr>
          <tr>
            <td class="tg-031e">15489</td>
            <td class="tg-031e">11095 (71%)</td>
            <td class="tg-031e">683 (4%)</td>
          </tr>
        </tbody>
      </table>

      <p class="postPar">Let's take a quick look at the collisions' distribution at Figure 1. There are 2581 slots (x-axis) and the number of collisions is depicted on y-axis.</p>
      <ol>
        <li>Hash each string – I used Java’s hashCode()</li>
        <li>Wrap the integer representation of the hash around the size of the collection</li>
        <li>Allocate the corresponding slot</li>
        <li>Number 0 signifies an empty cell, 1 an occupied cell and 2 or more a collision</li>
      </ol>
    </p>
    <img src="../img/figure-1.png" alt="Figure 1" width="80%" height="60%" >

    <p class="postPar">Figure 2 depicts the percentage of the slots that remained unallocated (x-axis) and the percentage of the slots where we noted collisions (y-axis). Each dot on the curve is a different table size as described earlier. Essentially this is the graphical representation of the table above.</p>

    <img src="../img/figure-2.png" alt="Figure 2" width="80%" height="60%" >
  </br></br>
  <p class="lastPar">Snip, snap, snout, this tale's told out.</p>
  <div
  class="just-comments"
  data-apikey="9fa1f1f5-2ca0-4d89-bb34-b78c48fafcb1"
  data-hideattribution="true">
</div>
<script async src="https://just-comments.com/w.js"></script>
</div> <!-- content -->
</div> <!-- container -->
<footer class="blog-footer">
  <!-- Social buttons -->
  <ul class="list-unstyled list-inline text-center">
    <li class="list-inline-item">
      <a class="btn-floating btn-fb mx-1">
        <i class="fa fa-github"><a href="https://github.com/lovemeblender"><img src="../img/gb-64.png" alt="Github" height="30" width="30"></a></i>
      </a>
    </li>
    <li class="list-inline-item">
      <a class="btn-floating btn-tw mx-1">
        <i class="fa fa-linkedin"><a href="http://uk.linkedin.com/in/mdespotopoulos/"><img src="../img/in-34.png" alt="LinkedIn" height="28" width="34"></a></i>
      </a>
    </li>
    <li class="list-inline-item">
      <a class="btn-floating btn-li mx-1">
        <i class="fa fa-twitter"><a href="https://twitter.com/mdespotopoulos"><img src="../img/twitter.png" alt="Twitter" height="30" width="30"></a></i>
      </a>
    </li>
  </ul>
  <!-- Social buttons -->
  <!-- Copyright -->
  <div class="footer-copyright text-center py-3">© 2018 Copyright: adayinlife</div>
  <!-- Copyright -->
</footer>
</body>
</html>
